#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScoreM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ScoreManagement")]
	public partial class ScoreManageDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertTerm(Term instance);
    partial void UpdateTerm(Term instance);
    partial void DeleteTerm(Term instance);
    partial void InsertAdministrativesClass(AdministrativesClass instance);
    partial void UpdateAdministrativesClass(AdministrativesClass instance);
    partial void DeleteAdministrativesClass(AdministrativesClass instance);
    partial void InsertConduct(Conduct instance);
    partial void UpdateConduct(Conduct instance);
    partial void DeleteConduct(Conduct instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDetail_Enrollment(Detail_Enrollment instance);
    partial void UpdateDetail_Enrollment(Detail_Enrollment instance);
    partial void DeleteDetail_Enrollment(Detail_Enrollment instance);
    partial void InsertEnrollment(Enrollment instance);
    partial void UpdateEnrollment(Enrollment instance);
    partial void DeleteEnrollment(Enrollment instance);
    partial void InsertLecturer(Lecturer instance);
    partial void UpdateLecturer(Lecturer instance);
    partial void DeleteLecturer(Lecturer instance);
    partial void InsertMajor(Major instance);
    partial void UpdateMajor(Major instance);
    partial void DeleteMajor(Major instance);
    partial void InsertSchoolTerm(SchoolTerm instance);
    partial void UpdateSchoolTerm(SchoolTerm instance);
    partial void DeleteSchoolTerm(SchoolTerm instance);
    partial void InsertScore(Score instance);
    partial void UpdateScore(Score instance);
    partial void DeleteScore(Score instance);
    partial void InsertSpecialize(Specialize instance);
    partial void UpdateSpecialize(Specialize instance);
    partial void DeleteSpecialize(Specialize instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public ScoreManageDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ScoreManagementConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreManageDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreManageDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreManageDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreManageDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Term> Terms
		{
			get
			{
				return this.GetTable<Term>();
			}
		}
		
		public System.Data.Linq.Table<AdministrativesClass> AdministrativesClasses
		{
			get
			{
				return this.GetTable<AdministrativesClass>();
			}
		}
		
		public System.Data.Linq.Table<Conduct> Conducts
		{
			get
			{
				return this.GetTable<Conduct>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Detail_Enrollment> Detail_Enrollments
		{
			get
			{
				return this.GetTable<Detail_Enrollment>();
			}
		}
		
		public System.Data.Linq.Table<Enrollment> Enrollments
		{
			get
			{
				return this.GetTable<Enrollment>();
			}
		}
		
		public System.Data.Linq.Table<Lecturer> Lecturers
		{
			get
			{
				return this.GetTable<Lecturer>();
			}
		}
		
		public System.Data.Linq.Table<Major> Majors
		{
			get
			{
				return this.GetTable<Major>();
			}
		}
		
		public System.Data.Linq.Table<SchoolTerm> SchoolTerms
		{
			get
			{
				return this.GetTable<SchoolTerm>();
			}
		}
		
		public System.Data.Linq.Table<Score> Scores
		{
			get
			{
				return this.GetTable<Score>();
			}
		}
		
		public System.Data.Linq.Table<Specialize> Specializes
		{
			get
			{
				return this.GetTable<Specialize>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private string _Permissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPermissionsChanging(string value);
    partial void OnPermissionsChanged();
    #endregion
		
		public Account()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permissions", DbType="NVarChar(50)")]
		public string Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				if ((this._Permissions != value))
				{
					this.OnPermissionsChanging(value);
					this.SendPropertyChanging();
					this._Permissions = value;
					this.SendPropertyChanged("Permissions");
					this.OnPermissionsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Term")]
	public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Credit;
		
		private EntitySet<Enrollment> _Enrollments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreditChanging(System.Nullable<int> value);
    partial void OnCreditChanged();
    #endregion
		
		public Term()
		{
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Int")]
		public System.Nullable<int> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_Enrollment", Storage="_Enrollments", ThisKey="ID", OtherKey="IDTerm")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Term = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Term = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdministrativesClasses")]
	public partial class AdministrativesClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _IDMajor;
		
		private string _Course;
		
		private EntitySet<Student> _Students;
		
		private EntityRef<Major> _Major;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDMajorChanging(string value);
    partial void OnIDMajorChanged();
    partial void OnCourseChanging(string value);
    partial void OnCourseChanged();
    #endregion
		
		public AdministrativesClass()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Major = default(EntityRef<Major>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMajor", DbType="VarChar(20)")]
		public string IDMajor
		{
			get
			{
				return this._IDMajor;
			}
			set
			{
				if ((this._IDMajor != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMajorChanging(value);
					this.SendPropertyChanging();
					this._IDMajor = value;
					this.SendPropertyChanged("IDMajor");
					this.OnIDMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course", DbType="NVarChar(5)")]
		public string Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				if ((this._Course != value))
				{
					this.OnCourseChanging(value);
					this.SendPropertyChanging();
					this._Course = value;
					this.SendPropertyChanged("Course");
					this.OnCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdministrativesClass_Student", Storage="_Students", ThisKey="ID", OtherKey="IdAdministrativeClass")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_AdministrativesClass", Storage="_Major", ThisKey="IDMajor", OtherKey="ID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.AdministrativesClasses.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.AdministrativesClasses.Add(this);
						this._IDMajor = value.ID;
					}
					else
					{
						this._IDMajor = default(string);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.AdministrativesClass = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.AdministrativesClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Conduct")]
	public partial class Conduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDSchoolTerm;
		
		private string _IDStudent;
		
		private System.Nullable<int> _ScoreOfConduct;
		
		private string _Classification;
		
		private EntityRef<SchoolTerm> _SchoolTerm;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSchoolTermChanging(string value);
    partial void OnIDSchoolTermChanged();
    partial void OnIDStudentChanging(string value);
    partial void OnIDStudentChanged();
    partial void OnScoreOfConductChanging(System.Nullable<int> value);
    partial void OnScoreOfConductChanged();
    partial void OnClassificationChanging(string value);
    partial void OnClassificationChanged();
    #endregion
		
		public Conduct()
		{
			this._SchoolTerm = default(EntityRef<SchoolTerm>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSchoolTerm", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDSchoolTerm
		{
			get
			{
				return this._IDSchoolTerm;
			}
			set
			{
				if ((this._IDSchoolTerm != value))
				{
					if (this._SchoolTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSchoolTermChanging(value);
					this.SendPropertyChanging();
					this._IDSchoolTerm = value;
					this.SendPropertyChanged("IDSchoolTerm");
					this.OnIDSchoolTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStudent", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDStudent
		{
			get
			{
				return this._IDStudent;
			}
			set
			{
				if ((this._IDStudent != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStudentChanging(value);
					this.SendPropertyChanging();
					this._IDStudent = value;
					this.SendPropertyChanged("IDStudent");
					this.OnIDStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreOfConduct", DbType="Int")]
		public System.Nullable<int> ScoreOfConduct
		{
			get
			{
				return this._ScoreOfConduct;
			}
			set
			{
				if ((this._ScoreOfConduct != value))
				{
					this.OnScoreOfConductChanging(value);
					this.SendPropertyChanging();
					this._ScoreOfConduct = value;
					this.SendPropertyChanged("ScoreOfConduct");
					this.OnScoreOfConductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classification", DbType="NVarChar(50)")]
		public string Classification
		{
			get
			{
				return this._Classification;
			}
			set
			{
				if ((this._Classification != value))
				{
					this.OnClassificationChanging(value);
					this.SendPropertyChanging();
					this._Classification = value;
					this.SendPropertyChanged("Classification");
					this.OnClassificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolTerm_Conduct", Storage="_SchoolTerm", ThisKey="IDSchoolTerm", OtherKey="ID", IsForeignKey=true)]
		public SchoolTerm SchoolTerm
		{
			get
			{
				return this._SchoolTerm.Entity;
			}
			set
			{
				SchoolTerm previousValue = this._SchoolTerm.Entity;
				if (((previousValue != value) 
							|| (this._SchoolTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolTerm.Entity = null;
						previousValue.Conducts.Remove(this);
					}
					this._SchoolTerm.Entity = value;
					if ((value != null))
					{
						value.Conducts.Add(this);
						this._IDSchoolTerm = value.ID;
					}
					else
					{
						this._IDSchoolTerm = default(string);
					}
					this.SendPropertyChanged("SchoolTerm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Conduct", Storage="_Student", ThisKey="IDStudent", OtherKey="ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Conducts.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Conducts.Add(this);
						this._IDStudent = value.ID;
					}
					else
					{
						this._IDStudent = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Description;
		
		private EntitySet<Major> _Majors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Department()
		{
			this._Majors = new EntitySet<Major>(new Action<Major>(this.attach_Majors), new Action<Major>(this.detach_Majors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Char(10)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Major", Storage="_Majors", ThisKey="ID", OtherKey="IDDepartment")]
		public EntitySet<Major> Majors
		{
			get
			{
				return this._Majors;
			}
			set
			{
				this._Majors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Majors(Major entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Majors(Major entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Detail.Enrollments]")]
	public partial class Detail_Enrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDEnrollment;
		
		private string _ClassSection;
		
		private string _Location;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private EntityRef<Enrollment> _Enrollment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEnrollmentChanging(string value);
    partial void OnIDEnrollmentChanged();
    partial void OnClassSectionChanging(string value);
    partial void OnClassSectionChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    #endregion
		
		public Detail_Enrollment()
		{
			this._Enrollment = default(EntityRef<Enrollment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEnrollment", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDEnrollment
		{
			get
			{
				return this._IDEnrollment;
			}
			set
			{
				if ((this._IDEnrollment != value))
				{
					if (this._Enrollment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEnrollmentChanging(value);
					this.SendPropertyChanging();
					this._IDEnrollment = value;
					this.SendPropertyChanged("IDEnrollment");
					this.OnIDEnrollmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassSection", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClassSection
		{
			get
			{
				return this._ClassSection;
			}
			set
			{
				if ((this._ClassSection != value))
				{
					this.OnClassSectionChanging(value);
					this.SendPropertyChanging();
					this._ClassSection = value;
					this.SendPropertyChanged("ClassSection");
					this.OnClassSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Date")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Date")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enrollment_Detail_Enrollment", Storage="_Enrollment", ThisKey="IDEnrollment", OtherKey="ID", IsForeignKey=true)]
		public Enrollment Enrollment
		{
			get
			{
				return this._Enrollment.Entity;
			}
			set
			{
				Enrollment previousValue = this._Enrollment.Entity;
				if (((previousValue != value) 
							|| (this._Enrollment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enrollment.Entity = null;
						previousValue.Detail_Enrollments.Remove(this);
					}
					this._Enrollment.Entity = value;
					if ((value != null))
					{
						value.Detail_Enrollments.Add(this);
						this._IDEnrollment = value.ID;
					}
					else
					{
						this._IDEnrollment = default(string);
					}
					this.SendPropertyChanged("Enrollment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Enrollments")]
	public partial class Enrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _IDTerm;
		
		private string _IDLecturer;
		
		private string _Course;
		
		private string _IdSchoolTerm;
		
		private EntitySet<Detail_Enrollment> _Detail_Enrollments;
		
		private EntitySet<Score> _Scores;
		
		private EntityRef<Term> _Term;
		
		private EntityRef<Lecturer> _Lecturer;
		
		private EntityRef<SchoolTerm> _SchoolTerm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnIDTermChanging(string value);
    partial void OnIDTermChanged();
    partial void OnIDLecturerChanging(string value);
    partial void OnIDLecturerChanged();
    partial void OnCourseChanging(string value);
    partial void OnCourseChanged();
    partial void OnIdSchoolTermChanging(string value);
    partial void OnIdSchoolTermChanged();
    #endregion
		
		public Enrollment()
		{
			this._Detail_Enrollments = new EntitySet<Detail_Enrollment>(new Action<Detail_Enrollment>(this.attach_Detail_Enrollments), new Action<Detail_Enrollment>(this.detach_Detail_Enrollments));
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			this._Term = default(EntityRef<Term>);
			this._Lecturer = default(EntityRef<Lecturer>);
			this._SchoolTerm = default(EntityRef<SchoolTerm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTerm", DbType="VarChar(20)")]
		public string IDTerm
		{
			get
			{
				return this._IDTerm;
			}
			set
			{
				if ((this._IDTerm != value))
				{
					if (this._Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTermChanging(value);
					this.SendPropertyChanging();
					this._IDTerm = value;
					this.SendPropertyChanged("IDTerm");
					this.OnIDTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLecturer", DbType="VarChar(20)")]
		public string IDLecturer
		{
			get
			{
				return this._IDLecturer;
			}
			set
			{
				if ((this._IDLecturer != value))
				{
					if (this._Lecturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLecturerChanging(value);
					this.SendPropertyChanging();
					this._IDLecturer = value;
					this.SendPropertyChanged("IDLecturer");
					this.OnIDLecturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course", DbType="NVarChar(50)")]
		public string Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				if ((this._Course != value))
				{
					this.OnCourseChanging(value);
					this.SendPropertyChanging();
					this._Course = value;
					this.SendPropertyChanged("Course");
					this.OnCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSchoolTerm", DbType="VarChar(20)")]
		public string IdSchoolTerm
		{
			get
			{
				return this._IdSchoolTerm;
			}
			set
			{
				if ((this._IdSchoolTerm != value))
				{
					if (this._SchoolTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSchoolTermChanging(value);
					this.SendPropertyChanging();
					this._IdSchoolTerm = value;
					this.SendPropertyChanged("IdSchoolTerm");
					this.OnIdSchoolTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enrollment_Detail_Enrollment", Storage="_Detail_Enrollments", ThisKey="ID", OtherKey="IDEnrollment")]
		public EntitySet<Detail_Enrollment> Detail_Enrollments
		{
			get
			{
				return this._Detail_Enrollments;
			}
			set
			{
				this._Detail_Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enrollment_Score", Storage="_Scores", ThisKey="ID", OtherKey="IDEnrollment")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_Enrollment", Storage="_Term", ThisKey="IDTerm", OtherKey="ID", IsForeignKey=true)]
		public Term Term
		{
			get
			{
				return this._Term.Entity;
			}
			set
			{
				Term previousValue = this._Term.Entity;
				if (((previousValue != value) 
							|| (this._Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Term.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._Term.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._IDTerm = value.ID;
					}
					else
					{
						this._IDTerm = default(string);
					}
					this.SendPropertyChanged("Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturer_Enrollment", Storage="_Lecturer", ThisKey="IDLecturer", OtherKey="ID", IsForeignKey=true)]
		public Lecturer Lecturer
		{
			get
			{
				return this._Lecturer.Entity;
			}
			set
			{
				Lecturer previousValue = this._Lecturer.Entity;
				if (((previousValue != value) 
							|| (this._Lecturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecturer.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._Lecturer.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._IDLecturer = value.ID;
					}
					else
					{
						this._IDLecturer = default(string);
					}
					this.SendPropertyChanged("Lecturer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolTerm_Enrollment", Storage="_SchoolTerm", ThisKey="IdSchoolTerm", OtherKey="ID", IsForeignKey=true)]
		public SchoolTerm SchoolTerm
		{
			get
			{
				return this._SchoolTerm.Entity;
			}
			set
			{
				SchoolTerm previousValue = this._SchoolTerm.Entity;
				if (((previousValue != value) 
							|| (this._SchoolTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolTerm.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._SchoolTerm.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._IdSchoolTerm = value.ID;
					}
					else
					{
						this._IdSchoolTerm = default(string);
					}
					this.SendPropertyChanged("SchoolTerm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Detail_Enrollments(Detail_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Enrollment = this;
		}
		
		private void detach_Detail_Enrollments(Detail_Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Enrollment = null;
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Enrollment = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Enrollment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lecturers")]
	public partial class Lecturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Degree;
		
		private string _Position;
		
		private string _Phone;
		
		private string _Email;
		
		private string _IdSpecialize;
		
		private string _PassWord;
		
		private EntitySet<Enrollment> _Enrollments;
		
		private EntityRef<Specialize> _Specialize;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDegreeChanging(string value);
    partial void OnDegreeChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIdSpecializeChanging(string value);
    partial void OnIdSpecializeChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    #endregion
		
		public Lecturer()
		{
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			this._Specialize = default(EntityRef<Specialize>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(10)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degree", DbType="NVarChar(50)")]
		public string Degree
		{
			get
			{
				return this._Degree;
			}
			set
			{
				if ((this._Degree != value))
				{
					this.OnDegreeChanging(value);
					this.SendPropertyChanging();
					this._Degree = value;
					this.SendPropertyChanged("Degree");
					this.OnDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NChar(10)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSpecialize", DbType="VarChar(20)")]
		public string IdSpecialize
		{
			get
			{
				return this._IdSpecialize;
			}
			set
			{
				if ((this._IdSpecialize != value))
				{
					if (this._Specialize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSpecializeChanging(value);
					this.SendPropertyChanging();
					this._IdSpecialize = value;
					this.SendPropertyChanged("IdSpecialize");
					this.OnIdSpecializeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(50)")]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturer_Enrollment", Storage="_Enrollments", ThisKey="ID", OtherKey="IDLecturer")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialize_Lecturer", Storage="_Specialize", ThisKey="IdSpecialize", OtherKey="ID", IsForeignKey=true)]
		public Specialize Specialize
		{
			get
			{
				return this._Specialize.Entity;
			}
			set
			{
				Specialize previousValue = this._Specialize.Entity;
				if (((previousValue != value) 
							|| (this._Specialize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialize.Entity = null;
						previousValue.Lecturers.Remove(this);
					}
					this._Specialize.Entity = value;
					if ((value != null))
					{
						value.Lecturers.Add(this);
						this._IdSpecialize = value.ID;
					}
					else
					{
						this._IdSpecialize = default(string);
					}
					this.SendPropertyChanged("Specialize");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Lecturer = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Lecturer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Majors")]
	public partial class Major : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _IDDepartment;
		
		private string _Description;
		
		private EntitySet<AdministrativesClass> _AdministrativesClasses;
		
		private EntitySet<Specialize> _Specializes;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDDepartmentChanging(string value);
    partial void OnIDDepartmentChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Major()
		{
			this._AdministrativesClasses = new EntitySet<AdministrativesClass>(new Action<AdministrativesClass>(this.attach_AdministrativesClasses), new Action<AdministrativesClass>(this.detach_AdministrativesClasses));
			this._Specializes = new EntitySet<Specialize>(new Action<Specialize>(this.attach_Specializes), new Action<Specialize>(this.detach_Specializes));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDepartment", DbType="VarChar(20)")]
		public string IDDepartment
		{
			get
			{
				return this._IDDepartment;
			}
			set
			{
				if ((this._IDDepartment != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDepartmentChanging(value);
					this.SendPropertyChanging();
					this._IDDepartment = value;
					this.SendPropertyChanged("IDDepartment");
					this.OnIDDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_AdministrativesClass", Storage="_AdministrativesClasses", ThisKey="ID", OtherKey="IDMajor")]
		public EntitySet<AdministrativesClass> AdministrativesClasses
		{
			get
			{
				return this._AdministrativesClasses;
			}
			set
			{
				this._AdministrativesClasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Specialize", Storage="_Specializes", ThisKey="ID", OtherKey="IdMajors")]
		public EntitySet<Specialize> Specializes
		{
			get
			{
				return this._Specializes;
			}
			set
			{
				this._Specializes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Major", Storage="_Department", ThisKey="IDDepartment", OtherKey="ID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Majors.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Majors.Add(this);
						this._IDDepartment = value.ID;
					}
					else
					{
						this._IDDepartment = default(string);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdministrativesClasses(AdministrativesClass entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_AdministrativesClasses(AdministrativesClass entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
		
		private void attach_Specializes(Specialize entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_Specializes(Specialize entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolTerm")]
	public partial class SchoolTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private System.Nullable<int> _Semester;
		
		private string _SchoolYear;
		
		private EntitySet<Conduct> _Conducts;
		
		private EntitySet<Enrollment> _Enrollments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnSemesterChanging(System.Nullable<int> value);
    partial void OnSemesterChanged();
    partial void OnSchoolYearChanging(string value);
    partial void OnSchoolYearChanged();
    #endregion
		
		public SchoolTerm()
		{
			this._Conducts = new EntitySet<Conduct>(new Action<Conduct>(this.attach_Conducts), new Action<Conduct>(this.detach_Conducts));
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester", DbType="Int")]
		public System.Nullable<int> Semester
		{
			get
			{
				return this._Semester;
			}
			set
			{
				if ((this._Semester != value))
				{
					this.OnSemesterChanging(value);
					this.SendPropertyChanging();
					this._Semester = value;
					this.SendPropertyChanged("Semester");
					this.OnSemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYear", DbType="VarChar(15)")]
		public string SchoolYear
		{
			get
			{
				return this._SchoolYear;
			}
			set
			{
				if ((this._SchoolYear != value))
				{
					this.OnSchoolYearChanging(value);
					this.SendPropertyChanging();
					this._SchoolYear = value;
					this.SendPropertyChanged("SchoolYear");
					this.OnSchoolYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolTerm_Conduct", Storage="_Conducts", ThisKey="ID", OtherKey="IDSchoolTerm")]
		public EntitySet<Conduct> Conducts
		{
			get
			{
				return this._Conducts;
			}
			set
			{
				this._Conducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolTerm_Enrollment", Storage="_Enrollments", ThisKey="ID", OtherKey="IdSchoolTerm")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conducts(Conduct entity)
		{
			this.SendPropertyChanging();
			entity.SchoolTerm = this;
		}
		
		private void detach_Conducts(Conduct entity)
		{
			this.SendPropertyChanging();
			entity.SchoolTerm = null;
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.SchoolTerm = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.SchoolTerm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Scores")]
	public partial class Score : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDEnrollment;
		
		private string _IDStudent;
		
		private System.Nullable<int> _LastStudy;
		
		private System.Nullable<int> _ExamTimes;
		
		private System.Nullable<int> _Scoreth;
		
		private string _Evaluate;
		
		private System.Nullable<double> _Diligent;
		
		private System.Nullable<double> _MidTerm;
		
		private System.Nullable<double> _Pratice;
		
		private System.Nullable<double> _Basic;
		
		private System.Nullable<double> _Report;
		
		private System.Nullable<double> _Exam;
		
		private EntityRef<Enrollment> _Enrollment;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEnrollmentChanging(string value);
    partial void OnIDEnrollmentChanged();
    partial void OnIDStudentChanging(string value);
    partial void OnIDStudentChanged();
    partial void OnLastStudyChanging(System.Nullable<int> value);
    partial void OnLastStudyChanged();
    partial void OnExamTimesChanging(System.Nullable<int> value);
    partial void OnExamTimesChanged();
    partial void OnScorethChanging(System.Nullable<int> value);
    partial void OnScorethChanged();
    partial void OnEvaluateChanging(string value);
    partial void OnEvaluateChanged();
    partial void OnDiligentChanging(System.Nullable<double> value);
    partial void OnDiligentChanged();
    partial void OnMidTermChanging(System.Nullable<double> value);
    partial void OnMidTermChanged();
    partial void OnPraticeChanging(System.Nullable<double> value);
    partial void OnPraticeChanged();
    partial void OnBasicChanging(System.Nullable<double> value);
    partial void OnBasicChanged();
    partial void OnReportChanging(System.Nullable<double> value);
    partial void OnReportChanged();
    partial void OnExamChanging(System.Nullable<double> value);
    partial void OnExamChanged();
    #endregion
		
		public Score()
		{
			this._Enrollment = default(EntityRef<Enrollment>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEnrollment", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDEnrollment
		{
			get
			{
				return this._IDEnrollment;
			}
			set
			{
				if ((this._IDEnrollment != value))
				{
					if (this._Enrollment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEnrollmentChanging(value);
					this.SendPropertyChanging();
					this._IDEnrollment = value;
					this.SendPropertyChanged("IDEnrollment");
					this.OnIDEnrollmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStudent", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDStudent
		{
			get
			{
				return this._IDStudent;
			}
			set
			{
				if ((this._IDStudent != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStudentChanging(value);
					this.SendPropertyChanging();
					this._IDStudent = value;
					this.SendPropertyChanged("IDStudent");
					this.OnIDStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastStudy", DbType="Int")]
		public System.Nullable<int> LastStudy
		{
			get
			{
				return this._LastStudy;
			}
			set
			{
				if ((this._LastStudy != value))
				{
					this.OnLastStudyChanging(value);
					this.SendPropertyChanging();
					this._LastStudy = value;
					this.SendPropertyChanged("LastStudy");
					this.OnLastStudyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamTimes", DbType="Int")]
		public System.Nullable<int> ExamTimes
		{
			get
			{
				return this._ExamTimes;
			}
			set
			{
				if ((this._ExamTimes != value))
				{
					this.OnExamTimesChanging(value);
					this.SendPropertyChanging();
					this._ExamTimes = value;
					this.SendPropertyChanged("ExamTimes");
					this.OnExamTimesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scoreth", DbType="Int")]
		public System.Nullable<int> Scoreth
		{
			get
			{
				return this._Scoreth;
			}
			set
			{
				if ((this._Scoreth != value))
				{
					this.OnScorethChanging(value);
					this.SendPropertyChanging();
					this._Scoreth = value;
					this.SendPropertyChanged("Scoreth");
					this.OnScorethChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Evaluate", DbType="VarChar(20)")]
		public string Evaluate
		{
			get
			{
				return this._Evaluate;
			}
			set
			{
				if ((this._Evaluate != value))
				{
					this.OnEvaluateChanging(value);
					this.SendPropertyChanging();
					this._Evaluate = value;
					this.SendPropertyChanged("Evaluate");
					this.OnEvaluateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diligent", DbType="Float")]
		public System.Nullable<double> Diligent
		{
			get
			{
				return this._Diligent;
			}
			set
			{
				if ((this._Diligent != value))
				{
					this.OnDiligentChanging(value);
					this.SendPropertyChanging();
					this._Diligent = value;
					this.SendPropertyChanged("Diligent");
					this.OnDiligentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MidTerm", DbType="Float")]
		public System.Nullable<double> MidTerm
		{
			get
			{
				return this._MidTerm;
			}
			set
			{
				if ((this._MidTerm != value))
				{
					this.OnMidTermChanging(value);
					this.SendPropertyChanging();
					this._MidTerm = value;
					this.SendPropertyChanged("MidTerm");
					this.OnMidTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pratice", DbType="Float")]
		public System.Nullable<double> Pratice
		{
			get
			{
				return this._Pratice;
			}
			set
			{
				if ((this._Pratice != value))
				{
					this.OnPraticeChanging(value);
					this.SendPropertyChanging();
					this._Pratice = value;
					this.SendPropertyChanged("Pratice");
					this.OnPraticeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Basic", DbType="Float")]
		public System.Nullable<double> Basic
		{
			get
			{
				return this._Basic;
			}
			set
			{
				if ((this._Basic != value))
				{
					this.OnBasicChanging(value);
					this.SendPropertyChanging();
					this._Basic = value;
					this.SendPropertyChanged("Basic");
					this.OnBasicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report", DbType="Float")]
		public System.Nullable<double> Report
		{
			get
			{
				return this._Report;
			}
			set
			{
				if ((this._Report != value))
				{
					this.OnReportChanging(value);
					this.SendPropertyChanging();
					this._Report = value;
					this.SendPropertyChanged("Report");
					this.OnReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam", DbType="Float")]
		public System.Nullable<double> Exam
		{
			get
			{
				return this._Exam;
			}
			set
			{
				if ((this._Exam != value))
				{
					this.OnExamChanging(value);
					this.SendPropertyChanging();
					this._Exam = value;
					this.SendPropertyChanged("Exam");
					this.OnExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enrollment_Score", Storage="_Enrollment", ThisKey="IDEnrollment", OtherKey="ID", IsForeignKey=true)]
		public Enrollment Enrollment
		{
			get
			{
				return this._Enrollment.Entity;
			}
			set
			{
				Enrollment previousValue = this._Enrollment.Entity;
				if (((previousValue != value) 
							|| (this._Enrollment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enrollment.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Enrollment.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._IDEnrollment = value.ID;
					}
					else
					{
						this._IDEnrollment = default(string);
					}
					this.SendPropertyChanged("Enrollment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Score", Storage="_Student", ThisKey="IDStudent", OtherKey="ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._IDStudent = value.ID;
					}
					else
					{
						this._IDStudent = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialize")]
	public partial class Specialize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _SpecializeName;
		
		private string _IdMajors;
		
		private string _Description;
		
		private EntitySet<Lecturer> _Lecturers;
		
		private EntityRef<Major> _Major;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnSpecializeNameChanging(string value);
    partial void OnSpecializeNameChanged();
    partial void OnIdMajorsChanging(string value);
    partial void OnIdMajorsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Specialize()
		{
			this._Lecturers = new EntitySet<Lecturer>(new Action<Lecturer>(this.attach_Lecturers), new Action<Lecturer>(this.detach_Lecturers));
			this._Major = default(EntityRef<Major>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializeName", DbType="NVarChar(50)")]
		public string SpecializeName
		{
			get
			{
				return this._SpecializeName;
			}
			set
			{
				if ((this._SpecializeName != value))
				{
					this.OnSpecializeNameChanging(value);
					this.SendPropertyChanging();
					this._SpecializeName = value;
					this.SendPropertyChanged("SpecializeName");
					this.OnSpecializeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMajors", DbType="VarChar(20)")]
		public string IdMajors
		{
			get
			{
				return this._IdMajors;
			}
			set
			{
				if ((this._IdMajors != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMajorsChanging(value);
					this.SendPropertyChanging();
					this._IdMajors = value;
					this.SendPropertyChanged("IdMajors");
					this.OnIdMajorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialize_Lecturer", Storage="_Lecturers", ThisKey="ID", OtherKey="IdSpecialize")]
		public EntitySet<Lecturer> Lecturers
		{
			get
			{
				return this._Lecturers;
			}
			set
			{
				this._Lecturers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Specialize", Storage="_Major", ThisKey="IdMajors", OtherKey="ID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.Specializes.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.Specializes.Add(this);
						this._IdMajors = value.ID;
					}
					else
					{
						this._IdMajors = default(string);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lecturers(Lecturer entity)
		{
			this.SendPropertyChanging();
			entity.Specialize = this;
		}
		
		private void detach_Lecturers(Lecturer entity)
		{
			this.SendPropertyChanging();
			entity.Specialize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<bool> _Gender;
		
		private string _Address;
		
		private string _Phone;
		
		private string _IdAdministrativeClass;
		
		private string _PassWord;
		
		private EntitySet<Conduct> _Conducts;
		
		private EntitySet<Score> _Scores;
		
		private EntityRef<AdministrativesClass> _AdministrativesClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnIdAdministrativeClassChanging(string value);
    partial void OnIdAdministrativeClassChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    #endregion
		
		public Student()
		{
			this._Conducts = new EntitySet<Conduct>(new Action<Conduct>(this.attach_Conducts), new Action<Conduct>(this.detach_Conducts));
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			this._AdministrativesClass = default(EntityRef<AdministrativesClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(10)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Char(10)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAdministrativeClass", DbType="VarChar(20)")]
		public string IdAdministrativeClass
		{
			get
			{
				return this._IdAdministrativeClass;
			}
			set
			{
				if ((this._IdAdministrativeClass != value))
				{
					if (this._AdministrativesClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAdministrativeClassChanging(value);
					this.SendPropertyChanging();
					this._IdAdministrativeClass = value;
					this.SendPropertyChanged("IdAdministrativeClass");
					this.OnIdAdministrativeClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(50)")]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Conduct", Storage="_Conducts", ThisKey="ID", OtherKey="IDStudent")]
		public EntitySet<Conduct> Conducts
		{
			get
			{
				return this._Conducts;
			}
			set
			{
				this._Conducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Score", Storage="_Scores", ThisKey="ID", OtherKey="IDStudent")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdministrativesClass_Student", Storage="_AdministrativesClass", ThisKey="IdAdministrativeClass", OtherKey="ID", IsForeignKey=true)]
		public AdministrativesClass AdministrativesClass
		{
			get
			{
				return this._AdministrativesClass.Entity;
			}
			set
			{
				AdministrativesClass previousValue = this._AdministrativesClass.Entity;
				if (((previousValue != value) 
							|| (this._AdministrativesClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdministrativesClass.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._AdministrativesClass.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._IdAdministrativeClass = value.ID;
					}
					else
					{
						this._IdAdministrativeClass = default(string);
					}
					this.SendPropertyChanged("AdministrativesClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conducts(Conduct entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Conducts(Conduct entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
}
#pragma warning restore 1591
